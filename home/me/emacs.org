#+TITLE Emacs Configuration
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el 


#+RESULTS:


#+begin_src emacs-lisp
;;  (all-the-icons-install-fonts t)
;; (dolist (font all-the-icons-font-names)
;;  (print (cons font (find-font (font-spec :name font)))))   
#+end_src 

#+RESULTS:

* NIX Configuration (for Emacs)

To tangle ~./emacs.nix~ use <kbd>C-c C-v T</kbd>.

#+begin_src nix :tangle ./emacs.nix
  { config, pkgs, ... }: {
    programs.emacs = {
      enable = true;
      package = pkgs.emacs;  # replace with pkgs.emacs-gtk, or a version provided by the community overlay if desired.
    	extraPackages = epkgs: [
        epkgs.dashboard
        epkgs.ascii-art-to-unicode
    	  epkgs.use-package
    	  epkgs.cask
    	  epkgs.consult
        epkgs.doom-modeline
        epkgs.doom-themes
    	  epkgs.nix-mode
        # epkgs.forge
        epkgs.fsharp-mode
        epkgs.general
        epkgs.helpful
        epkgs.hydra
        epkgs.evil # Vim keybindings
        epkgs.evil-collection
        epkgs.evil-nerd-commenter
        epkgs.pdf-tools
        epkgs.all-the-icons
        epkgs.all-the-icons-dired
        epkgs.nerd-icons 
        epkgs.dired-open
        epkgs.dired-hide-dotfiles
        
        # epkgs.evil-magit
        epkgs.lsp-mode
        epkgs.lsp-ui
        epkgs.lsp-treemacs
        epkgs.lsp-ivy
        epkgs.magit # Git integration
        epkgs.org-bullets
        # epkgs.org-habit
        epkgs.which-key # Keybinding suggestions
        epkgs.ivy # Fuzzy completion
        epkgs.ivy-rich
        epkgs.counsel # Ivy-based commands
        epkgs.swiper # Fuzzy search
        epkgs.typescript-mode
        epkgs.company # Auto-completion
        epkgs.company-box
        epkgs.rainbow-delimiters # Colorful brackets
        epkgs.visual-fill-column
        # shells
        epkgs.vterm
        epkgs.eshell-z
        epkgs.eshell-git-prompt
      ];
    };
    
    home.file.".emacs.d/.keep".text = "";
    home.file.".emacs.d/init.el".source = ./init.el;
  }
#+end_src

* Startup
#+begin_src emacs-lisp 
  (setq inhibit-startup-message t)

  ;; Set a dark theme quickly, becase the doom theme sometimes takes a while to laod
  ;; this prevents a prolonged white screen when starting
  (load-theme 'tango-dark t)
#+end_src

* Basic UI Config
** Remove standard emacs UI elements
#+begin_src emacs-lisp
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar
#+end_src

** Visual Bell
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

* Basic Config

** Don't ask to update buffer after file has changed on disk.
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
  (setq auto-revert-verbose nil)           ; Suppress messages from auto-revert
  (setq global-auto-revert-non-file-buffers t) ; Also revert Dired and other buffers

  (setq revert-without-query '(".*"))
#+end_src

#+RESULTS:
| .* |

* Key bindings
** Use escape to quit any propts
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** EVIL Mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    
    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
** General (used for space leader key)
#+begin_src emacs-lisp
    (use-package general
      :config
      (general-create-definer my/leader-keys
        :keymaps '(normal insert visual emacs)
        :prefix "SPC"
        :global-prefix "C-SPC")

      (my/leader-keys
        "b"  '(:ignore t :which-key "buffers")
        "bk" '((lambda () (interactive) (kill-buffer (current-buffer)))  :which-key "kill buffer")
        "bs" '(counsel-switch-buffer :which-key "switch buffer")
        
        "t"  '(:ignore t :which-key "toggles")
        "tt" '(counsel-load-theme :which-key "choose theme")))

  (my/leader-keys
    "e"  '(:ignore t :which-key "emacs")
    "ed"    '(dashboard-open :which-key "dashboard")
    "ec"    '((lambda () (interactive) (find-file "/home/me/nixos-config/home/me/emacs.org")) :which-key "config file"))
#+end_src

#+RESULTS:


** Other general key maps
#+begin_src emacs-lisp
  (my/leader-keys
    "f"  '(:ignore t :which-key "files")	
    "."  '(counsel-find-file :which-key "find file")
    "fr" '(counsel-recentf :which-key "files")
    "fd" '(dired :which-key "dired")
    )
#+end_src

** Snippits
*** insert-latex-multicols
#+begin_src emacs-lisp
  (defun insert-latex-multicols ()
    "Insert a LaTeX multicols environment for Org mode."
    (interactive)
    (insert "
  ,#+BEGIN_EXPORT latex
  \\end{multicols}
  ,#+END_EXPORT
      
  ,#+BEGIN_EXPORT latex
  \\begin{multicols}{2}
  ,#+END_EXPORT
      "))
#+end_src


*** Bind snippets
#+begin_src emacs-lisp
  (my/leader-keys
    "s"  '(:ignore t :which-key "snippets")	
    "sm"  '(insert-latex-multicols :which-key "multicol"))
#+end_src

* UI
** Zone Mode

#+begin_src emacs-lisp
  (require 'zone)
  (zone-when-idle 60)
#+end_src

** Fonts
#+begin_src emacs-lisp
  (setq inhibit-compacting-font-caches t)

  (set-face-attribute 'default nil :font "Fira Code" :height 120)
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 100)
  (set-face-attribute 'variable-pitch nil :font "Noto Serif" :height 110 :weight 'regular )
#+end_src

** Themes
#+begin_src emacs-lisp
  (use-package doom-themes)
  (load-theme 'doom-acario-dark t)
#+end_src

** Mode Line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 30)))

  ;; Display column number of mode line
  (set-face-attribute 'mode-line nil :height 120)
  (column-number-mode)
#+end_src

** Line numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 0)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
  		tetris-mode
                  term-mode-hook
  		shell-mode-hook
  		treemacs-mode-hook
  		vterm-mode-hook
  		pdf-view-mode-hook
  		eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

#+RESULTS:

** Layout

*** Prefer horizontal (side-by-side) window splits when possible
#+begin_src emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 60) 
#+end_src

** Visual Fill Column
#+begin_src emacs-lisp
  (with-eval-after-load 'visual-fill-column
     (setq visual-fill-column-width 120) ; Set the width of the text column
     (setq visual-fill-column-center-text t) ; Center the text
     (global-visual-fill-column-mode 1)) ; Enable globally

  (defun my/tetris-mode-visual-fill ()
      (setq visual-fill-column-width 40
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (tetris-mode . my/tetris-mode-visual-fill))
  
  (defun my/snake-mode-visual-fill ()
      (setq visual-fill-column-width 80
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (snake-mode . my/tetris-mode-visual-fill))

#+end_src

** Text Scaling, with Hydra
#+begin_src emacs-lisp
   (use-package hydra)

   (defhydra hydra-text-scale (:timeout 4)
     "scale text"
     ("j" text-scale-increase "in")
     ("k" text-scale-decrease "out")
     ("f" nil "finished" :exit t))

   (my/leader-keys
     "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

* Minibuffer stuff
** Enable which-key for keybinding suggestions
#+begin_src emacs-lisp
  (require 'which-key)
  (which-key-mode)
#+end_src
** Ivy & councel
*** Ivy with a few EVIL style keys

#+begin_src emacs-lisp
      (use-package ivy
        :diminish
        :bind (("C-s" . swiper)
               :map ivy-minibuffer-map
               ("TAB" . ivy-alt-done)	
               ("C-l" . ivy-alt-done)
               ("C-j" . ivy-next-line)
               ("C-k" . ivy-previous-line)
               :map ivy-switch-buffer-map
               ("C-k" . ivy-previous-line)
               ("C-l" . ivy-done)
               ("C-d" . ivy-switch-buffer-kill)
               :map ivy-reverse-i-search-map
               ("C-k" . ivy-previous-line)
               ("C-d" . ivy-reverse-i-search-kill))
        :config
        (ivy-mode 1))

   (advice-add 'org-set-tags-command :override 'counsel-org-tag) 
#+end_src

*** Ivy Rich
#+begin_src emacs-lisp
  (use-package ivy-rich :init (ivy-rich-mode 1))
#+end_src

*** Councel
#+begin_src emacs-lisp
   (use-package counsel
     :bind (("M-x" . counsel-M-x)
            ("C-x b" . counsel-ibuffer)
            ("C-x C-f" . counsel-find-file)
            :map minibuffer-local-map
            ("C-r" . 'counsel-minibuffer-history)))
#+end_src

** Helpful Help, with Helpful                                           
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap org-set-tags-command] . councel-org-tag)
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+End_src

* Programming
** Code completion with Company
#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))

 (add-hook 'after-init-hook 'global-company-mode)
#+end_src

** Rainbow Brackets
#+begin_src emacs-lisp
   (use-package rainbow-delimiters
     :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Commenting
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src
** Git, with Magit (and Forge)
#+begin_quote
NOTE: Make sure to configure a GitHub token before using this package!
- https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
- https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
#+end_quote

#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  ;; (use-package forge)
#+end_src

*** Git Key bindings
#+begin_src emacs-lisp
    (my/leader-keys
      "g"  '(:ignore t :which-key "git")
      "gg" '(magit-status  :which-key "magit status"))
#+end_src

#+RESULTS:

** Languages
*** Language Server Protocol
#+begin_src emacs-lisp
  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))
#+end_src

**** LSP UI
#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src

**** LSP Treemacs
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp)
#+end_src
**** LSP Ivy
#+begin_src emacs-lisp
  (use-package lsp-ivy)
#+end_src

*** Keybindings
#+begin_src emacs-lisp
  (my/leader-keys
     "l"   '(:ignore t :which-key "lsp mode")
     "ld"  '(flymake-show-project-diagnostics :which-key "diagnostics")
     "lt"  '(:prefix t :which-key "tree")
     "lts" '(lsp-treemacs-symbols :which-key "symbols")
     "ls"  '(lsp-ivy-workspace-symbol :which-key "find symbol")
     ) 

#+end_src

*** F#

#+begin_src emacs-lisp
  (use-package fsharp-mode
    :mode " \\.fs[iylx]?$'"
    :hook (fsharp-mode . lsp-deferred)
    :config
    (autoload 'fsharp-mode "fsharp" "Major mode for editing F# code." t)
    (autoload 'run-fsharp "inf-fsharp" "Run an inferior F# process." t)
    (autoload 'mdbg "mdbg" "The CLR debugger" t)
    ;; (setq inferior-fsharp-program "PATH_TO_YOUR_FSI_EXE")
    ;; (setq fsharp-compiler "PATH_TO_YOUR_FSC_EXE")
    (add-to-list 'auto-mode-alist '("\\.fs[iylx]?$" . fsharp-mode))
          )
#+end_src

*** NIX
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode " \\.nix$"
    :hook (nix-mode . lsp-deferred)
    :config
    (add-to-list 'auto-mode-alist '("\\.nix$" . nix-mode)))
        
  ;    (with-eval-after-load 'lsp-mode
  ;      (lsp-register-client
  ;        (make-lsp-client :new-connection (lsp-stdio-connection "nixd")
  ;                         :major-modes '(nix-mode)
  ;                         :priority 0
  ;                         :server-id 'nixd)))
#+end_src

*** TypeScript

#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src

* Project Management 
#+begin_src emacs-lisp
  ;; Basic project.el configuration
  (require 'project)

  ;; If you want project.el to use specific version control systems
  (setq project-vc-extra-root-markers '(".project" "package.json" "Cargo.toml" "pyproject.toml"))
   #+end_src

** Create project marker (.project)
#+begin_src emacs-lisp
(defun my/create-project-marker ()
  "Create a .project file in the current directory and register it as a project."
  (interactive)
  (let ((project-dir (read-directory-name "Create project in directory: " default-directory)))
    (with-temp-buffer
      (write-file (expand-file-name ".project" project-dir)))
    (message "Created .project marker in %s" project-dir)
    (when (y-or-n-p "Register this directory as a project? ")
      (project-remember-project project-dir))))
#+end_src 

   
** Project key bindings
#+begin_src emacs-lisp
  (my/leader-keys
    "p"     '(:ignore t :which-key "project")
    "pp"    '(project-switch-project :which-key "switch project")
    "pf"    '(project-find-file :which-key "find file")
    "pb"    '(project-switch-to-buffer :which-key "switch buffer")
    "pd"    '(project-dired :which-key "dired")
    "pg"    '(consult-ripgrep :which-key "ripgrep")
    "pk"    '(project-kill-buffers :which-key "kill buffers")
    "ps"    '(project-shell :which-key "shell")
    "pc"    '(project-compile :which-key "compile")
    "pa"    '(project-remember-project :which-key "add project")
    "pr"    '(project-forget-project :which-key "remove project")
    "pn"    '(my/create-project-marker :which-key "new project marker")
    
    ;; Consult integration
    "pC"    '(:prefix t :which-key "consult")
    "pCb"   '(consult-project-buffer :which-key "project buffers")
    "pCf"   '(consult-find :which-key "find")
    "pCg"   '(consult-grep :which-key "grep"))
#+end_src 

* Org Mode
#+begin_src emacs-lisp
      (defun my/org-mode-setup ()
        (org-indent-mode)
        (variable-pitch-mode 1)
        (visual-line-mode 1)

        (setq org-agenda-start-with-log-mode t)
        (setq org-log-done 'time)
        (setq org-log-into-drawer t)
        )
#+end_src
** Org files
#+begin_src emacs-lisp
  (setq org-directory "~/OneDrive/org/")
  (setq org-agenda-files '("~/OneDrive/org/tasks.org"
  			 "~/OneDrive/org/shed.org"
                           "~/OneDrive/org/anniversaries.org"))
#+end_src

** Org Mode keys

#+begin_src emacs-lisp
  (my/leader-keys
    "o"    '(:ignore t :which-key "org")
    "oa"   '(org-agenda :which-key "agenda")
    "oc"   '(org-capture :which-key "capture")
    "or"   '(org-refile :which-key "refile")
    "ot"   '(counsel-org-tags :which-key "tags")
    "of"   '((lambda () (interactive) (dired org-directory)) :which-key "files")
    ;; org dates
    "od"   '(:prefix t :which-key "date")
    "od."  '(org-timestamp :which-key "timestamp")
    "od!"  '(org-timestamp-inactive :which-key "inactive")
    "ods"  '(org-schedule :which-key "schedule")
    "odd"  '(org-deadline :which-key "deadline"))
#+end_src

** Org UI
*** Org fonts
#+begin_src emacs-lisp
   (defun my/org-font-setup ()
     ;; Replace list hyphen with dot
     (font-lock-add-keywords 'org-mode
                             '(("^ *\\([-]\\) "
                                (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

     ;; Set faces for heading levels
     (dolist (face '((org-level-1 . 1.4)
                     (org-level-2 . 1.2)
                     (org-level-3 . 1.1)
                     (org-level-4 . 1.0)
                     (org-level-5 . 1.1)
                     (org-level-6 . 1.1)
                     (org-level-7 . 1.1)
                     (org-level-8 . 1.1)))
       (set-face-attribute (car face) nil :font "noto sans" :weight 'regular :height (cdr face)))

     ;; Ensure that anything that should be fixed-pitch in Org files appears that way
     (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
     (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
     (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
     (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

*** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
       :after org
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
*** Visual Fill
#+begin_src emacs-lisp
  (defun my/org-mode-visual-fill ()
      (setq visual-fill-column-width 120
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . my/org-mode-visual-fill))
#+end_src
** Capture
#+begin_src emacs-lisp
  (setq org-capture-templates
         '(
           ;; ("j" "Journal")
           ;; ("jj" "journal" entry (file+datetree "~/OneDrive/org/journal.org")
           ;;  "\n\n* %U\n%?")
           ;; ("jt" "journal" entry (file+datetree "~/OneDrive/org/journal.org")
           ;;  "* [ ] %?\nSCHEDULED: %t")

           ("j" "Journal")
           ("jj" "Journal" entry
            (file+olp+datetree "journal.org" "Journal")
            "* Entry - %<%H:%M>\n%U\n\n%?"
            :empty-lines 1
   	 :kill-buffer t)
           ("jg" "Goals" entry
            (file+olp+datetree "journal.org" "Journal")
            "* TODO Goals - %<%d %B %Y> [/]\nSCHEDULED: %t\n** [ ] %?"
            :prepend t)

           ("b" "blog-post" entry (file+olp "~/repos/blog-home/blog.org" "blog")
            "* TODO %^{Title} %^g \n:PROPERTIES:\n:EXPORT_FILE_NAME: %^{Slug}\n:EXPORT_DATE: %T\n:END:\n\n%?"
            :empty-lines-before 2)

           ("m" "Email Workflow")
           ("mf" "Follow Up" entry (file+olp "~/OneDrive/org/mail.org" "Follow Up")
            "* TODO Follow up with %:fromname on %a\nSCHEDULED:%t\n\n%i")
           ("mr" "Read Later" entry (file+olp "~/OneDrive/org/mail.org" "Read Later")
            "* TODO Read %a\nSCHEDULED:%t\n\n%i")

         ("s" "Sleep Entry" table-line
            (file+headline "sleep.org" "Data")
            "| |%^{Date}u|%^{Move (kcal)}|%^{Exercise (min)}|%^{Caffeine (mg)}|%^{Tim in daylight (min)}|%^{Time in bed}|%^{Time out of bed}|%^{Sleep Duration (h:mm)}||%^{Tags}g|"
            :immediate-finish t :jump-to-captured t
            )

           ("t" "Task" entry
            (file+headline "tasks.org" "Tasks")
            "** TODO %? %^g\n:PROPERTIES:\n:CREATED: %U\n:END:\n" :empty-lines 1)

           ("T" "Task with Deadline" entry
            (file+headline "tasks.org" "Tasks")
            "** TODO %?  %^g\nDEADLINE: %^t\n:PROPERTIES:\n:CREATED: %U\n:END:\n" :empty-lines 1)

           ))
#+end_src
** Templates
*** Block templates, with tempo
to create a block from the template type ~<el~ and press <kbd>tab<kbd>.
#+begin_src emacs-lisp
  (require 'org-tempo)
     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src
** TODOs
#+begin_src emacs-lisp
    (setq org-todo-keywords
              '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
                (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)"
  			"|" "COMPLETED(c)" "CANC(k@)")))
#+end_src
** Org Habit
#+begin_src emacs-lisp
  (require 'org-habit)
   (add-to-list 'org-modules 'org-habit)
   (setq org-habit-graph-column 60)
#+end_src
** Agenda (Custome views)
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
   '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))

    ("W" "Work Tasks" tags-todo "+work-hold")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))
#+end_src
** Refile (archive TODOs)
#+begin_src emacs-lisp
  (setq org-refile-targets
    '(("archive.org" :maxlevel . 2)
      ("tasks.org" :maxlevel . 1)))
  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

** Initialise org mode
#+begin_src emacs-lisp
   (use-package org
     :hook (org-mode . my/org-mode-setup)
     :config
     (setq org-ellipsis " ▾")
     (my/org-font-setup))
#+end_src
* Org Babel, and tangle
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa . t) 
     (emacs-lisp . t)
     (python . t)
     (shell . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/nixos-config/home/me/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

Don't ask for confomration on each block:
#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src 

** Ditaa

#+begin_src emacs-lisp
(setq org-ditaa-jar-path nil)  ;; We're not using the jar directly
(setq org-babel-ditaa-command "/run/current-system/sw/bin/ditaa")
#+end_src

* Dired

- Ret :: open file
- S-Ret :: open file new window
- M-Rert :: open file new window, keep focus
  
** Key Bindings
*** Navigation

*** macs / Evil

    n / j - next line
    p / k - previous line
    j / J - jump to file in buffer
    RET - select file or directory
    ^ - go to parent directory
    S-RET / g O - Open file in “other” window
    M-RET - Show file in other window without focusing (previewing files)
    g o (dired-view-file) - Open file but in a “preview” mode, close with q
    g / g r Refresh the buffer with revert-buffer after changing configuration (and after filesystem changes!)

*** Marking files

    m - Marks a file
    u - Unmarks a file
    U - Unmarks all files in buffer
    * t / t - Inverts marked files in buffer
    % m - Mark files in buffer using regular expression
    * - Lots of other auto-marking functions
    k / K - “Kill” marked items (refresh buffer with g / g r to get them back)
    Many operations can be done on a single file if there are no active marks!

*** Copying and Renaming files

    C - Copy marked files (or if no files are marked, the current file)
    Copying single and multiple files
    U - Unmark all files in buffer
    R - Rename marked files, renaming multiple is a move!
    % R - Rename based on regular expression: ^test , old-\&

Power command: C-x C-q (dired-toggle-read-only) - Makes all file names in the buffer editable directly to rename them! Press Z Z to confirm renaming or Z Q to abort.
Deleting files

    D - Delete marked file
    d - Mark file for deletion
    x - Execute deletion for marks
    delete-by-moving-to-trash - Move to trash instead of deleting permanently
 
*** Creating and extracting archives

    Z - Compress or uncompress a file or folder to (.tar.gz)
    c - Compress selection to a specific file
    dired-compress-files-alist - Bind compression commands to file extension

*** Other common operations

    T - Touch (change timestamp)
    M - Change file mode
    O - Change file owner
    G - Change file group
    S - Create a symbolic link to this file
    L - Load an Emacs Lisp file into Emacs



  #+begin_src emacs-lisp
        (use-package dired
          :ensure nil
          :commands (dired dired-jump)
          :bind (("C-x C-j" . dired-jump))
          :custom ((dired-listing-switches "-agho --group-directories-first"))
          :config
          (evil-collection-define-key 'normal 'dired-mode-map
            "h" 'dired-single-up-directory
            "l" 'dired-single-buffer))

    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode))
    ;; (all-the-icons-install-fonts t)
    (face-attribute 'default :font)
        
        (use-package dired-open
          :config
          ;; Doesn't work as expected!
          ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
          (setq dired-open-extensions '(("png" . "feh")
                                        ("mkv" . "mpv"))))

        (use-package dired-hide-dotfiles
          :hook (dired-mode . dired-hide-dotfiles-mode)
          :config
          (evil-collection-define-key 'normal 'dired-mode-map
            "H" 'dired-hide-dotfiles-mode))
  #+end_src

* Terminals

** term-mode
#+begin_src emacs-lisp
    (use-package term
      :config
      (setq explicit-shell-file-name "zsh") ;; Change this to zsh, etc
      ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

      ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
      (setq term-prompt-regexp "^.*?\ \ *")
      )
#+end_src

*** Better term mode colours
#+begin_src emacs-lisp :tangle no
;(use-package eterm-256color
;  :hook (term-mode . eterm-256color-mode))
#+end_src

** vterm

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))
#+end_src

** shell-mode

#+begin_src emacs-lisp
(when (eq system-type 'windows-nt)
  (setq explicit-shell-file-name "powershell.exe")
  (setq explicit-powershell.exe-args '()))
#+end_src

** Eshell

#+begin_src emacs-lisp
  (defun eshell-load-zsh-aliases ()
    "Read zsh aliases and add them to the list of eshell aliases."
    ;; Bash needs to be run - temporarily - interactively
    ;; in order to get the list of aliases.
      (with-temp-buffer
        (call-process "zsh" nil '(t nil) nil "-ci" "alias")
        (goto-char (point-min))
        (while (re-search-forward "alias \\(.+\\)='\\(.+\\)'$" nil t)
          (eshell/alias (match-string 1) (match-string 2)))))

  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
    
    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
    
    ;; Bind some useful keys for evil-mode

    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)
    
    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config
    
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "btop" "nvtop" "zsh" "vim")))
    
    (add-hook 'eshell-alias-load-hook 'eshell-load-zsh-aliases)
    (eshell-git-prompt-use-theme 'powerline))
#+end_src

* LateX

#+begin_src emacs-lisp
(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
#+end_src 

** Export Link Colours
#+begin_src emacs-lisp
(setq org-latex-hyperref-template 
      "\\hypersetup{\n  colorlinks=true,\n  linkcolor=blue,\n  filecolor=cyan,\n  urlcolor=magenta,\n  citecolor=green\n}")
#+end_src

** Document Structure

Structure the exported documents with these section types:

#+begin_example
 * section
 ** subsection
 *** subsubsection
 **** paragraph
 ***** subparagraph
 ****** itemize, etc.
 - itemize
#+end_example

#+begin_src emacs-lisp
  ;(add-to-list 'org-latex-classes
  ;             '("article"
  ;               "\\documentclass{article}"
  ;               ("\\section{%s}" . "\\section*{%s}")
  ;               ("\\subsection{%s}" . "\\subsection*{%s}")
  ;               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ;               ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ;               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))  
  (add-to-list 'org-latex-classes
               '("koma-article"
                 "\\documentclass{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src 

* PDF Tools

#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  (pdf-tools-install)
  ;; Automatically use pdf-view-mode for .pdf files
  (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode)))
#+end_src

** Disable line numbers in pdf-view-mode
#+begin_src emacs-lisp
  (add-hook 'pdf-view-mode-hook
            (lambda ()
              (display-line-numbers-mode -1)
              (visual-fill-column-mode -1)))
#+end_src

* NIX Configuration (in Emacs)
#+begin_src emacs-lisp
    (defun my/run-home-manager-switch ()
    "sudo nixos-rebuild switch --flake ~/nixos-config#tuffy"
    (interactive)
    (async-shell-command "home-manager switch")
    (sleep-for 2))

    (my/leader-keys
    "n"   '(:ignore t :which-key "nix")
    "nh"  '(:prefix t :which-key "home manager")
    "nhs" '(my/run-home-manager-switch :which-key "switch")
    "nhe" '( (lambda()(interactive)(find-file-existing "~/nixos-config/home/me/default.nix")) :which-key "edit")
    "nht" '( (lambda()(interactive)(find-file-existing "~/nixos-config/hosts/tuffy/default.nix")) :which-key "tuffy")

    )
#+end_src

* Dashboard

~dashboard-startup-banner~ value can be :
- ~official~ which displays the official emacs logo
- ~logo~ which displays an alternative emacs logo
- ~1~, ~2~ or ~3~ which displays one of the text banners
- a path to an image file

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)

    (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
    (setq dashboard-startup-banner 2)
    (setq dashboard-center-content t)
    (setq dashboard-vertically-center-content t)
    
    (setq dashboard-show-shortcuts t)
    )
#+end_src

** Dashboard Items
#+begin_src emacs-lisp
  (setq dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)
                          (registers . 5)))

  (setq dashboard-startupify-list '(dashboard-insert-banner
                                  dashboard-insert-newline
                                  dashboard-insert-banner-title
                                  dashboard-insert-newline
                                  dashboard-insert-navigator
                                  dashboard-insert-newline
                                  dashboard-insert-init-info
                                  dashboard-insert-items
                                  dashboard-insert-newline
                                  dashboard-insert-footer))
#+end_src 

** Customization
#+begin_src emacs-lisp
    (setq dashboard-set-navigator t)
    (setq dashboard-projects-backend 'project-el)

    ;; To enable cycle navigation between each section:
    (setq dashboard-navigation-cycle t)

  ;; (setq dashboard-icon-type 'all-the-icons)  ; use `all-the-icons' package
  (setq dashboard-display-icons-p t)     ; display icons on both GUI and terminal
  (setq dashboard-icon-type 'nerd-icons) ; use `nerd-icons' package
    
    ;; (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
#+end_src 

